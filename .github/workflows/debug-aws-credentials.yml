name: Debug AWS Credentials and GPG Key

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  debug-credentials:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Environment
        run: |
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "GitHub Workflow: ${{ github.workflow }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "GitHub Event Path: ${{ github.event_path }}"
          echo "GitHub Workspace: ${{ github.workspace }}"
          echo "GitHub Action: ${{ github.action }}"
          echo "GitHub Action Path: ${{ github.action_path }}"
          echo "GitHub Action Repository: ${{ github.action_repository }}"
          echo "GitHub Action Ref: ${{ github.action_ref }}"
          echo "GitHub API URL: ${{ github.api_url }}"
          echo "GitHub Server URL: ${{ github.server_url }}"
          echo "GitHub Run ID: ${{ github.run_id }}"
          echo "GitHub Run Number: ${{ github.run_number }}"
          echo "GitHub Run Attempt: ${{ github.run_attempt }}"
          echo "GitHub Job: ${{ github.job }}"
          echo "GitHub Actions: ${{ github.actions }}"
          echo "GitHub Token: ***" # Don't print the actual token

      - name: Debug Variables
        run: |
          echo "TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE || 'Not set' }}"
          echo "S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET || 'Not set' }}"
          echo "TERRAFORM_AWS_ASSUME_ROLE_ITAR: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR || 'Not set' }}"
          echo "S3_INTEGRATION_BUCKET_ITAR: ${{ vars.S3_INTEGRATION_BUCKET_ITAR || 'Not set' }}"
          echo "TERRAFORM_AWS_ASSUME_ROLE_CN: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN || 'Not set' }}"
          echo "S3_INTEGRATION_BUCKET_CN: ${{ vars.S3_INTEGRATION_BUCKET_CN || 'Not set' }}"

      - name: Debug Secrets (presence only)
        run: |
          echo "AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY != '' && 'Set' || 'Not set' }}"
          echo "KEY_NAME: ${{ secrets.KEY_NAME != '' && 'Set' || 'Not set' }}"
          echo "GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY != '' && 'Set' || 'Not set' }}"
          echo "PASSPHRASE: ${{ secrets.PASSPHRASE != '' && 'Set' || 'Not set' }}"
          echo "GPG_KEY_NAME: ${{ secrets.GPG_KEY_NAME != '' && 'Set' || 'Not set' }}"
          echo "CF_IAM_ROLE: ${{ secrets.CF_IAM_ROLE != '' && 'Set' || 'Not set' }}"
          echo "CF_KEY_NAME: ${{ secrets.CF_KEY_NAME != '' && 'Set' || 'Not set' }}"

      - name: Debug GPG Key
        id: debug-gpg
        continue-on-error: true
        run: |
          echo "Checking GPG environment..."
          gpg --version
          
          echo "Checking if GPG key file exists in repository..."
          if [ -f "amazon-cloudwatch-agent/private-key.gpg" ]; then
            echo "GPG key file found in repository"
            
            echo "Validating GPG key file format..."
            gpg --list-packets amazon-cloudwatch-agent/private-key.gpg || echo "Error: GPG key file format is invalid"
          else
            echo "GPG key file not found in repository"
          fi
          
          echo "Creating temporary GPG key file for testing..."
          # We can't directly check if a secret exists, but we can try to use it
          echo "Testing GPG key format from secret..."
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/test-gpg-key.asc
            
          echo "Checking GPG key format from secret..."
          if gpg --list-packets /tmp/test-gpg-key.asc 2>/dev/null; then
            echo "GPG key format from secret is valid"
          else
            echo "Error: GPG key format from secret is invalid"
            echo "Common issues:"
            echo "1. Missing or incorrect begin/end markers"
            echo "2. Extra whitespace or line breaks"
            echo "3. Corrupted key data"
            echo "4. Incorrect encoding (should be ASCII-armored)"
          fi
          
          rm -f /tmp/test-gpg-key.asc

      - name: Test GPG Key Import
        id: gpg-import
        uses: crazy-max/ghaction-import-gpg@v5
        continue-on-error: true
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Check GPG Import Status
        run: |
          if [ "${{ steps.gpg-import.outcome }}" == "success" ]; then
            echo "GPG key import succeeded"
            gpg --list-secret-keys
            
            echo "Testing GPG signing in non-interactive environment..."
            # Create a test file
            echo "Test file for GPG signing" > /tmp/test-file.txt
            
            echo "Testing with standard GPG command (likely to fail):"
            gpg --detach-sign /tmp/test-file.txt || echo "Standard GPG signing failed as expected"
            
            echo "Testing with batch mode GPG command (should work):"
            echo "${{ secrets.PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --detach-sign /tmp/test-file.txt
            if [ $? -eq 0 ]; then
              echo "Batch mode GPG signing succeeded"
            else
              echo "Batch mode GPG signing failed"
            fi
            
            echo "Testing with pinentry-mode loopback (should work):"
            echo "${{ secrets.PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign /tmp/test-file.txt
            if [ $? -eq 0 ]; then
              echo "Pinentry-mode loopback GPG signing succeeded"
            else
              echo "Pinentry-mode loopback GPG signing failed"
            fi
            
            # Clean up
            rm -f /tmp/test-file.txt /tmp/test-file.txt.gpg
          else
            echo "GPG key import failed"
            echo "Error: ${{ steps.gpg-import.outputs.error-message || 'No error message available' }}"
            echo "Please check that:"
            echo "1. The GPG_PRIVATE_KEY secret is properly formatted"
            echo "2. The PASSPHRASE secret is correct"
            echo "3. The GPG key is not corrupted"
          fi

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        continue-on-error: true
        with:
          role-to-assume: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2
          output-credentials: true

      - name: Check AWS Credentials Status
        run: |
          if [ "${{ steps.aws-credentials.outcome }}" == "success" ]; then
            echo "AWS credentials configuration succeeded"
          else
            echo "AWS credentials configuration failed"
            echo "Error: ${{ steps.aws-credentials.outputs.error-message || 'No error message available' }}"
          fi

      - name: Test AWS CLI
        if: steps.aws-credentials.outcome == 'success'
        run: |
          echo "Testing AWS CLI commands..."
          echo "Getting caller identity..."
          aws sts get-caller-identity
          
          echo "Listing S3 buckets..."
          aws s3 ls
          
          if [ -n "${{ vars.S3_INTEGRATION_BUCKET }}" ]; then
            echo "Listing S3 integration bucket..."
            aws s3 ls s3://${{ vars.S3_INTEGRATION_BUCKET }}
          fi

      - name: Test OIDC Provider
        if: steps.aws-credentials.outcome != 'success'
        run: |
          echo "Testing OIDC provider configuration..."
          echo "GitHub OIDC token issuer: https://token.actions.githubusercontent.com"
          echo "GitHub OIDC token audience: sts.amazonaws.com"
          echo "GitHub OIDC token subject: repo:${{ github.repository }}:${{ github.ref }}"
          echo "GitHub OIDC token subject claim: repo:${{ github.repository }}:ref:${{ github.ref }}"
          
          echo "Please verify that your IAM role trust policy includes:"
          echo "- OIDC provider: arn:aws:iam::924305315339:oidc-provider/token.actions.githubusercontent.com"
          echo "- Condition: StringLike: token.actions.githubusercontent.com:sub: repo:${{ github.repository }}:*"

      - name: Debug IAM Role
        if: steps.aws-credentials.outcome != 'success'
        run: |
          echo "Debugging IAM role..."
          echo "Role ARN: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE || 'Not set' }}"
          
          if [ -n "${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}" ]; then
            echo "Role ARN format check:"
            if [[ "${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}" =~ ^arn:aws:iam::[0-9]{12}:role/[a-zA-Z0-9+=,.@_-]+$ ]]; then
              echo "Role ARN format appears valid"
            else
              echo "Role ARN format appears invalid"
            fi
            
            echo "Role ARN components:"
            ACCOUNT_ID=$(echo "${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}" | sed -n 's/^arn:aws:iam::([0-9]{12}):role\/.*$/\1/p')
            ROLE_NAME=$(echo "${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}" | sed -n 's/^arn:aws:iam::[0-9]{12}:role\/(.*)$/\1/p')
            echo "Account ID: $ACCOUNT_ID"
            echo "Role Name: $ROLE_NAME"
          fi
