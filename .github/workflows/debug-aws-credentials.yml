# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: Debug AWS Credentials
on:
  workflow_dispatch:
    inputs:
      role-arn:
        description: 'Optional role ARN to test (defaults to TERRAFORM_AWS_ASSUME_ROLE)'
        type: string
        required: false
      region:
        description: 'AWS region to use'
        type: string
        default: 'us-west-2'
        required: false

jobs:
  debug-credentials:
    name: 'Debug AWS Credentials'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Print environment info
        run: |
          echo "GitHub Runner: ${{ runner.os }} - ${{ runner.arch }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "GitHub Workflow: ${{ github.workflow }}"
          echo "GitHub Run ID: ${{ github.run_id }}"
          echo "GitHub Run Number: ${{ github.run_number }}"
          
      - name: Check if TERRAFORM_AWS_ASSUME_ROLE exists as variable
        id: check-var
        run: |
          if [[ -n "${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}" ]]; then
            echo "TERRAFORM_AWS_ASSUME_ROLE variable exists"
            echo "var_exists=true" >> $GITHUB_OUTPUT
          else
            echo "TERRAFORM_AWS_ASSUME_ROLE variable does not exist"
            echo "var_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if TERRAFORM_AWS_ASSUME_ROLE exists as secret
        id: check-secret
        run: |
          if [[ -n "${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}" ]]; then
            echo "TERRAFORM_AWS_ASSUME_ROLE secret exists (value masked)"
            echo "secret_exists=true" >> $GITHUB_OUTPUT
          else
            echo "TERRAFORM_AWS_ASSUME_ROLE secret does not exist"
            echo "secret_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if S3_INTEGRATION_BUCKET exists as variable
        run: |
          if [[ -n "${{ vars.S3_INTEGRATION_BUCKET }}" ]]; then
            echo "S3_INTEGRATION_BUCKET variable exists: ${{ vars.S3_INTEGRATION_BUCKET }}"
          else
            echo "S3_INTEGRATION_BUCKET variable does not exist"
          fi
          
      - name: Check if S3_INTEGRATION_BUCKET exists as secret
        run: |
          if [[ -n "${{ secrets.S3_INTEGRATION_BUCKET }}" ]]; then
            echo "S3_INTEGRATION_BUCKET secret exists (value masked)"
          else
            echo "S3_INTEGRATION_BUCKET secret does not exist"
          fi
          
      - name: Debug AWS Credentials with Variable
        if: steps.check-var.outputs.var_exists == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: ${{ inputs.region }}
          mask-aws-account-id: false
          role-session-name: GitHubActionsDebugVar
          role-duration-seconds: 900
          output-credentials: true
          
      - name: Test AWS CLI with Variable
        if: steps.check-var.outputs.var_exists == 'true'
        run: |
          echo "Testing AWS CLI with TERRAFORM_AWS_ASSUME_ROLE variable..."
          aws sts get-caller-identity
          echo "Testing S3 access..."
          if [[ -n "${{ vars.S3_INTEGRATION_BUCKET }}" ]]; then
            aws s3 ls s3://${{ vars.S3_INTEGRATION_BUCKET }} || echo "Failed to list S3 bucket"
          else
            echo "S3_INTEGRATION_BUCKET variable not set, skipping S3 test"
          fi
          echo "Testing ECR access..."
          aws ecr describe-repositories --region ${{ inputs.region }} || echo "Failed to list ECR repositories"
          
      - name: Debug AWS Credentials with Secret
        if: steps.check-secret.outputs.secret_exists == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: ${{ inputs.region }}
          mask-aws-account-id: false
          role-session-name: GitHubActionsDebugSecret
          role-duration-seconds: 900
          output-credentials: true
          
      - name: Test AWS CLI with Secret
        if: steps.check-secret.outputs.secret_exists == 'true'
        run: |
          echo "Testing AWS CLI with TERRAFORM_AWS_ASSUME_ROLE secret..."
          aws sts get-caller-identity
          echo "Testing S3 access..."
          if [[ -n "${{ secrets.S3_INTEGRATION_BUCKET }}" ]]; then
            aws s3 ls s3://${{ secrets.S3_INTEGRATION_BUCKET }} || echo "Failed to list S3 bucket"
          else
            echo "S3_INTEGRATION_BUCKET secret not set, skipping S3 test"
          fi
          echo "Testing ECR access..."
          aws ecr describe-repositories --region ${{ inputs.region }} || echo "Failed to list ECR repositories"
          
      - name: Debug AWS Credentials with Input Role
        if: inputs.role-arn != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role-arn }}
          aws-region: ${{ inputs.region }}
          mask-aws-account-id: false
          role-session-name: GitHubActionsDebugInput
          role-duration-seconds: 900
          output-credentials: true
          
      - name: Test AWS CLI with Input Role
        if: inputs.role-arn != ''
        run: |
          echo "Testing AWS CLI with input role ARN..."
          aws sts get-caller-identity
          echo "Testing ECR access..."
          aws ecr describe-repositories --region ${{ inputs.region }} || echo "Failed to list ECR repositories"
          
      - name: Debug OIDC Provider
        run: |
          echo "GitHub OIDC Provider URL: token.actions.githubusercontent.com"
          echo "GitHub OIDC Subject: repo:${{ github.repository }}:ref:${{ github.ref }}"
          echo "GitHub OIDC Token Audience: sts.amazonaws.com"
          
      - name: Debug AWS Credentials with Verbose Logging
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role-arn || vars.TERRAFORM_AWS_ASSUME_ROLE || secrets.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: ${{ inputs.region }}
          mask-aws-account-id: false
          role-session-name: GitHubActionsDebugVerbose
          role-duration-seconds: 900
          output-credentials: true
          
      - name: Test AWS CLI with Verbose Logging
        run: |
          echo "Testing AWS CLI with verbose logging..."
          aws sts get-caller-identity --debug
          
      - name: Suggest Next Steps
        run: |
          echo "=== Debug Results Summary ==="
          echo "TERRAFORM_AWS_ASSUME_ROLE variable exists: ${{ steps.check-var.outputs.var_exists }}"
          echo "TERRAFORM_AWS_ASSUME_ROLE secret exists: ${{ steps.check-secret.outputs.secret_exists }}"
          echo ""
          echo "=== Suggested Next Steps ==="
          echo "1. Check if the IAM role exists in your AWS account"
          echo "2. Verify the IAM role has the correct trust policy for GitHub OIDC"
          echo "3. Ensure the IAM role has necessary permissions for S3 and ECR operations"
          echo "4. Update the test-build-docker.yml workflow to accept TerraformAWSAssumeRole as an input"
          echo "5. Update the build-test-artifacts.yml workflow to pass TerraformAWSAssumeRole to test-build-docker.yml"
          echo ""
          echo "=== Example Trust Policy ==="
          echo '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "arn:aws:iam::ACCOUNT_ID:oidc-provider/token.actions.githubusercontent.com"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "token.actions.githubusercontent.com:sub": "repo:OWNER/REPO:*"
                  }
                }
              }
            ]
          }'
